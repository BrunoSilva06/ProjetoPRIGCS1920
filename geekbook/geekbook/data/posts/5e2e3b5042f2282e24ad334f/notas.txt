=========================API==========================
mongoimport -d filmes -c filmes --jsonArray movies.json

mkdir filmes

cd filmes

npm init

cd ..

npx express-generator --view=pug filmes

1º/bin/www

var myport = '3000'

console.log('Servidor à escuta em...'+myport);

2ºapp.js
apagar logger
apagar cookieparser

3º
pastas models controllers
importar mongoose

4ºMongoose
var mongoose = require('mongoose');

mongoose.connect('mongodb://127.0.0.1:27017/filmes', {useNewUrlParser: true, useUnifiedTopology:true})
        .then(()=> console.log('Mongo ready: ' + mongoose.connection.readyState))
        .catch((erro)=> console.log('Mongo: erro na conexão: '+ erro))


>npm i mongoose --save

5ºModels exemplo
======================================================
const mongoose = require('mongoose')

var filmeSchema = new mongoose.Schema({
    title: String,
    year: String,
    cast: [String],
    genres: [String]

});

module.exports = mongoose.model('filme', filmeSchema);
======================================================

6ºControllers exemplo
======================================================
var Obra = require('../models/obras')

const Obras = module.exports

//GET /obras
Obras.listar = () =>{
    return Obra
            .find()
            .exec()
}

//GET /obras/id
Obras.consultar = id => {    
    return Obra
        .findOne({id: id})
        .exec()
}

// POST /obras
Obras.inserir = obra => {
    var novo = new Obra(obra)
    return novo.save()
}

// DELETE /obras/:id
Obras.apagar = id =>{
    return Obras.deleteOne({ _id: id }).exec();
}

//Filtrar por parametros
Obras.filtrarAno = ano =>{
    return Obra
        .find({anoCriacao: ano})
        .exec()
}

Obras.filtrarCompositor = c =>{
    return Obra 
        .find({"compositor" :  { '$regex' : c, '$options' : 'i' }})
        .exec()
}

//query elaborada... agrupar por compositor..

Obras.agruparCompositor = ()  =>{
    return Obra 
        .aggregate([{$unwind: "$compositor"}, {$group:{_id:"$compositor", numObras:{$sum:1}, obras:{$push: {t: "$nome"}}}},{$sort: {numObras:-1}}])
        .exec()
}

Queries em mongoDB
db.filmes.aggregate([{$unwind: "$cast"}])

db.filmes.aggregate([{$unwind: "$cast"}, {$group: {_id: "$cast", numFilmes: {$sum: 1}}},{$sort: {numFilmes: -1}}, {$limit: 10}])



db.filmes.aggregate([{$unwind: "$cast"}, {$group: {_id: "$cast", numFilmes: {$sum: 1},titulos:  {$push: {t: "$title"}}}},{$sort: {numFilmes: -1}}, {$limit: 10}])


db.filmes.find({title: /Love/i}).count() // contar ocorrencias de uma string: case insensitive


----project fields
db.inventory.find( { status: "A" }, {_id: 0, item: 1, status: 1 } )

---unwind e show
db.filmes.aggregate([{$unwind: "$genres"},{$group: {_id:"$genres"}}])

--result inside query
db.filmes.find({"genres": "Drama"})

--actores ordem alfabética
db.filmes.aggregate([{$unwind: "$cast"}, {$group: {_id: "$cast", numFilmes: {$sum: 1}}},{$sort: {"_id":1}}])